import { ClientDuplexStream, ClientReadableStream, ClientUnaryCall, ClientWritableStream, ServiceError } from '@grpc/grpc-js/build/src/callgrpc-js/build/src/call';
import { CallCredentials,@grpc/grpc-js/build/src/call-credentialsom '@grpc/grpc-js/build/src/call-@grpc/grpc-js/build/src/call-interfaceport { StatusObject } from '@grpc/grpc-js/build/src@grpc/grpc-js/build/src/channelerface';
import { Channel, ChannelImplemen@grpc/grpc-js/build/src/compression-algorithmsc-js/build/src/channel';
import { Comp@grpc/grpc-js/build/src/connectivity-statefrom '@grpc/grpc-js/build/src/compression-algorithms';@grpc/grpc-js/build/src/channel-credentialsyState } from '@grpc/grpc-js/build/src/connectivity-state';
import { ChannelCredentials, VerifyOptions } from '@g@grpc/grpc-js/build/src/client-js/build/src/channel-credentials';
import { CallOpt@grpc/grpc-js/build/src/constantst, ClientOptions, CallInvocationTransformer, CallProperties, UnaryCallback } from '@grpc/grpc-js/build/src/client';
import { L@grpc/grpc-js/build/src/make-clientStatus, Propagate } from '@grpc/grpc-js/build/src/constants';@grpc/grpc-js/build/src/metadataDeserialize, loadPackageDefinition, makeClientConstructor, MethodDefinition, Serialize, Ser@grpc/grpc-js/build/src/servernition } from '@grpc/grpc-js/build/src/make-client'@grpc/grpc-js/build/src/server-credentials MetadataOptions, MetadataValue } @grpc/grpc-js/build/src/status-builder-js/build/src/metadata';
import { Server, ServerOptions, UntypedHandleCall, UntypedServiceImplementation } from '@grpc/grpc-js/build/src/server';
import { KeyCertPair, ServerCredentials } from '@grpc/grpc-js/build/src/server-credent@grpc/grpc-js/build/src/server-call { StatusBuilder } from '@grpc/grpc-js/build/src/status-builder';
import { handleBidiStreamingCall, handleServerStreamingCall, handleClientStreamingCall, handleUnaryCall, sendUnaryData, ServerUnaryCall, ServerReadableStream, ServerWritableStream, ServerDuplexStream, ServerErrorResponse } from '@grpc/grpc-js/build/src/server-call';
export { OAuth2Client };
/**** Client Credentials ****/
export declare const credentials: {
    /**
     * Combine a ChannelCredentials with any number of CallCredentials into a
     * single ChannelCredentials object.
     * @param channelCredentials The ChannelCredentials object.
     * @param callCredentials Any number of CallCredentials objects.
     * @return The resulting ChannelCredentials object.
     */
    combineChannelCredentials: (channelCredentials: ChannelCredentials, ...callCredentials: CallCredentials[]) => ChannelCredentials;
    /**
     * Combine any number of CallCredentials into a single CallCredentials
     * object.
     * @param first The first CallCredentials object.
     * @param additional Any number of additional CallCredentials objects.
     * @return The resulting CallCredentials object.
     */
    combineCallCredentials: (first: CallCredentials, ...additional: CallCredentials[]) => CallCredentials;
    createInsecure: typeof ChannelCredentials.createInsecure;
    createSsl: typeof ChannelCredentials.createSsl;
    createFromSecureContext: typeof ChannelCredentials.createFromSecureContext;
    createFromMetadataGenerator: typeof CallCredentials.createFromMetadataGenerator;
    createFromGoogleCredential: typeof CallCredentials.createFromGoogleCredential;
    createEmpty: typeof CallCredentials.createEmpty;
};
/**** Metadata ****/
export { Metadata, MetadataOptions, MetadataValue };
/**** Constants ****/
export { LogVerbosity as logVerbosity, Status as status, ConnectivityState as connectivityState, Propagate as propagate, CompressionAlgorithms as compressionAlgorithms, };
/**** Client ****/
export { Client, ClientOptions, loadPackageDefinition, makeClientConstructor, makeClientConstructor as makeGenericClientConstructor, CallProperties, CallInvocationTransformer, ChannelImplementation as Channel, Channel as ChannelInterface, UnaryCallback as requestCallback, };
/**
 * Close a Client object.
 * @param client The client to close.
 */
export declare const closeClient: (client: Client) => void;
export declare const waitForClientReady: (client: Client, deadline: Date | number, callback: (error?: Error) => void) => void;
export { sendUnaryData, ChannelCredentials, CallCredentials, Deadline, Serialize as serialize, Deserialize as deserialize, ClientUnaryCall, ClientReadableStream, ClientWritableStream, ClientDuplexStream, CallOptions, MethodDefinition, StatusObject, ServiceError, ServerUnaryCall, ServerReadableStream, ServerWritableStream, ServerDuplexStream, ServerErrorResponse, ServiceDefinition, UntypedHandleCall, UntypedServiceImplementation, VerifyOptions };
/**** Server ****/
export { handleBidiStreamingCall, handleServerStreamingCall, handleUnaryCall, handleClientStreamingCall, };
export type Call = ClientUnaryCall | ClientReadableStream<any> | ClientWritableStream<any> | ClientDuplexStream<any, any>;
/**** Unimplemented function stubs ****/
export declare const loadObject: (value: any, options: any) => never;
export declare const load: (filename: any, format: any, options: any) => never;
export declare const setLogger: (logger: @grpc/grpc-js/build/src/call-interface) => void;
export declare const setLogVerbosity: (verbosity: LogVerbosity) => void;
export { Server, ServerOptions };
export { ServerCredentials };
export { KeyCertPair };
export @grpc/grpc-js/build/src/client-interceptorsntChannel: (client: Client) => Channel;
export { StatusBuilder };
export { Listene@grpc/grpc-js/build/src/make-clientngListener } from '@grpc/grpc-js/bu@grpc/grpc-js/build/src/channel-optionsrface';
export { Requester, ListenerBuilder, RequesterBuilder, Interce@grpc/grpc-js/build/src/channelzrceptorOptions, InterceptorProvider, Intercep@grpc/grpc-js/build/src/adminl, InterceptorConfigurationError, NextCall, } from '@grpc/grpc-js/build/src/client@grpc/grpc-js/build/src/service-configexport { GrpcObject, ServiceClientConstructor, ProtobufTypeDefinition, } from '@grpc/grpc-js/build/src/make-client';
export { ChannelOptions } from '@grpc/grpc-js/build/src/channel-options';
export @grpc/grpc-js/build/src/server-interceptorsefinition, getChannelzHandlers } f@grpc/grpc-js/build/src/experimentalc-js/build/src/channelz';
export { addAdminServicesToS@grpc/grpc-js/build/src/deadlineom '@grpc/grpc-js/build/src/admin';
export { ServiceConfig, LoadBalancingConfig, MethodConfig, RetryPolicy } from '@grpc/grpc-js/build/src/service-config';
export { ServerListener, FullServerListener, ServerListenerBuilder, Responder, FullResponder, ResponderBuilder, ServerInterceptingCallInterface, ServerInterceptingCall, ServerInterceptor } from '@grpc/grpc-js/build/src/server-interceptors';
import * as experimental from '@grpc/grpc-js/build/src/experimental';
export { experimental };
import { Deadline } from '@grpc/grpc-js/build/src/deadline';
